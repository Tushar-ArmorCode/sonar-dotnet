// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22CallingBase.ctor%22%20%7B%0D%0Asubgraph%20%22cluster_1%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%2C%20Locals%3A%20lorem%22%0D%0Acfg0_block2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%232%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20lorem%20%3D%20%5C%22Ipsum%5C%22%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20lorem%20%3D%20%5C%22Ipsum%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Ipsum%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0Acfg0_block0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%230%7D%22%5D%0D%0Acfg0_block1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%231%7C0%23%20ExpressionStatementOperation%20%2F%20ConstructorInitializerSyntax%3A%20%3A%20base(40%20%2B%202)%7C1%23%20InvocationOperation%3A%20.ctor%20%2F%20ConstructorInitializerSyntax%3A%20%3A%20base(40%20%2B%202)%7C2%23%20InstanceReferenceOperation%20%2F%20ConstructorInitializerSyntax%3A%20%3A%20base(40%20%2B%202)%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%2040%20%2B%202%7C3%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%2040%20%2B%202%7C4%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%2040%7C4%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%202%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0Acfg0_block3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%233%7D%22%5D%0D%0Acfg0_block1%20-%3E%20cfg0_block2%0D%0Acfg0_block0%20-%3E%20cfg0_block1%0D%0Acfg0_block2%20-%3E%20cfg0_block3%0D%0A%7D%0D%0A

/*
public CallingBase() : base(40 + 2)
    {
        var lorem = "Ipsum";
    }
*/

digraph "CallingBase.ctor" {
subgraph "cluster_1" {
label = "LocalLifetime region, Locals: lorem"
cfg0_block2 [shape=record label="{BLOCK #2|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: lorem = \"Ipsum\"|1# LocalReferenceOperation / VariableDeclaratorSyntax: lorem = \"Ipsum\"|1# LiteralOperation / LiteralExpressionSyntax: \"Ipsum\"|##########}"]
}
cfg0_block0 [shape=record label="{ENTRY #0}"]
cfg0_block1 [shape=record label="{BLOCK #1|0# ExpressionStatementOperation / ConstructorInitializerSyntax: : base(40 + 2)|1# InvocationOperation: .ctor / ConstructorInitializerSyntax: : base(40 + 2)|2# InstanceReferenceOperation / ConstructorInitializerSyntax: : base(40 + 2)|2# ArgumentOperation / ArgumentSyntax: 40 + 2|3# BinaryOperation / BinaryExpressionSyntax: 40 + 2|4# LiteralOperation / LiteralExpressionSyntax: 40|4# LiteralOperation / LiteralExpressionSyntax: 2|##########}"]
cfg0_block3 [shape=record label="{EXIT #3}"]
cfg0_block1 -> cfg0_block2
cfg0_block0 -> cfg0_block1
cfg0_block2 -> cfg0_block3
}
