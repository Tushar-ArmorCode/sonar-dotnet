// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22IsTypeInConditionChain%22%20%7B%0D%0Asubgraph%20%22cluster_1%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%2C%20Locals%3A%20str%2C%20type%2C%20baseType%22%0D%0Asubgraph%20%22cluster_2%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%2C%20Locals%3A%20ret%22%0D%0Acfg0_block5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%235%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20%5C%22value%5C%22%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20%5C%22value%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22value%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0Acfg0_block1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%231%7C%23%23%20BranchValue%20%23%23%7C0%23%20IsPatternOperation%20%2F%20IsPatternExpressionSyntax%3A%20a%20is%20string%20str%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20string%20str%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0Acfg0_block2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%232%7C%23%23%20BranchValue%20%23%23%7C0%23%20IsPatternOperation%20%2F%20IsPatternExpressionSyntax%3A%20str.GetType()%20is%20%5C%7B%20%5C%7D%20type%7C1%23%20InvocationOperation%3A%20GetType%20%2F%20InvocationExpressionSyntax%3A%20str.GetType()%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20str%7C1%23%20RecursivePatternOperation%20%2F%20RecursivePatternSyntax%3A%20%5C%7B%20%5C%7D%20type%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0Acfg0_block3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%233%7C%23%23%20BranchValue%20%23%23%7C0%23%20IsPatternOperation%20%2F%20IsPatternExpressionSyntax%3A%20type.BaseType%20is%20Type%20baseType%7C1%23%20PropertyReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20type.BaseType%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20type%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20Type%20baseType%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0Acfg0_block4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%234%7C%23%23%20BranchValue%20%23%23%7C0%23%20PropertyReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20baseType.IsAbstract%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20baseType%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0Acfg0_block0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%230%7D%22%5D%0D%0Acfg0_block6%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%236%7D%22%5D%0D%0Acfg0_block4%20-%3E%20cfg0_block5%20%5Blabel%3D%22Else%22%5D%0D%0Acfg0_block0%20-%3E%20cfg0_block1%0D%0Acfg0_block1%20-%3E%20cfg0_block2%20%5Blabel%3D%22Else%22%5D%0D%0Acfg0_block2%20-%3E%20cfg0_block3%20%5Blabel%3D%22Else%22%5D%0D%0Acfg0_block3%20-%3E%20cfg0_block4%20%5Blabel%3D%22Else%22%5D%0D%0Acfg0_block1%20-%3E%20cfg0_block6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0Acfg0_block2%20-%3E%20cfg0_block6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0Acfg0_block3%20-%3E%20cfg0_block6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0Acfg0_block4%20-%3E%20cfg0_block6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0Acfg0_block5%20-%3E%20cfg0_block6%0D%0A%7D%0D%0A

/*
public void IsTypeInConditionChain(object a)
    {
        if (a is string str
            && str.GetType() is { } type
            && type.BaseType is Type baseType
            && baseType.IsAbstract)
        {
            var ret = "value";
        }
    }
*/

digraph "IsTypeInConditionChain" {
subgraph "cluster_1" {
label = "LocalLifetime region, Locals: str, type, baseType"
subgraph "cluster_2" {
label = "LocalLifetime region, Locals: ret"
cfg0_block5 [shape=record label="{BLOCK #5|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = \"value\"|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = \"value\"|1# LiteralOperation / LiteralExpressionSyntax: \"value\"|##########}"]
}
cfg0_block1 [shape=record label="{BLOCK #1|## BranchValue ##|0# IsPatternOperation / IsPatternExpressionSyntax: a is string str|1# ParameterReferenceOperation / IdentifierNameSyntax: a|1# DeclarationPatternOperation / DeclarationPatternSyntax: string str|##########}"]
cfg0_block2 [shape=record label="{BLOCK #2|## BranchValue ##|0# IsPatternOperation / IsPatternExpressionSyntax: str.GetType() is \{ \} type|1# InvocationOperation: GetType / InvocationExpressionSyntax: str.GetType()|2# LocalReferenceOperation / IdentifierNameSyntax: str|1# RecursivePatternOperation / RecursivePatternSyntax: \{ \} type|##########}"]
cfg0_block3 [shape=record label="{BLOCK #3|## BranchValue ##|0# IsPatternOperation / IsPatternExpressionSyntax: type.BaseType is Type baseType|1# PropertyReferenceOperation / MemberAccessExpressionSyntax: type.BaseType|2# LocalReferenceOperation / IdentifierNameSyntax: type|1# DeclarationPatternOperation / DeclarationPatternSyntax: Type baseType|##########}"]
cfg0_block4 [shape=record label="{BLOCK #4|## BranchValue ##|0# PropertyReferenceOperation / MemberAccessExpressionSyntax: baseType.IsAbstract|1# LocalReferenceOperation / IdentifierNameSyntax: baseType|##########}"]
}
cfg0_block0 [shape=record label="{ENTRY #0}"]
cfg0_block6 [shape=record label="{EXIT #6}"]
cfg0_block4 -> cfg0_block5 [label="Else"]
cfg0_block0 -> cfg0_block1
cfg0_block1 -> cfg0_block2 [label="Else"]
cfg0_block2 -> cfg0_block3 [label="Else"]
cfg0_block3 -> cfg0_block4 [label="Else"]
cfg0_block1 -> cfg0_block6 [label="WhenFalse"]
cfg0_block2 -> cfg0_block6 [label="WhenFalse"]
cfg0_block3 -> cfg0_block6 [label="WhenFalse"]
cfg0_block4 -> cfg0_block6 [label="WhenFalse"]
cfg0_block5 -> cfg0_block6
}
