// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22WhileAndOr%22%20%7B%0D%0Acfg0_block0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%230%7D%22%5D%0D%0Acfg0_block1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%231%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0Acfg0_block2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%232%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20b%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0Acfg0_block3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%233%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20c%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0Acfg0_block4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%234%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20a%20%3D%20false%3B%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20a%20%3D%20false%7C2%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20false%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0Acfg0_block5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%235%7D%22%5D%0D%0Acfg0_block0%20-%3E%20cfg0_block1%0D%0Acfg0_block4%20-%3E%20cfg0_block1%0D%0Acfg0_block1%20-%3E%20cfg0_block2%20%5Blabel%3D%22Else%22%5D%0D%0Acfg0_block2%20-%3E%20cfg0_block3%20%5Blabel%3D%22Else%22%5D%0D%0Acfg0_block2%20-%3E%20cfg0_block4%20%5Blabel%3D%22WhenTrue%22%5D%0D%0Acfg0_block3%20-%3E%20cfg0_block4%20%5Blabel%3D%22Else%22%5D%0D%0Acfg0_block1%20-%3E%20cfg0_block5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0Acfg0_block3%20-%3E%20cfg0_block5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0A

/*
public void WhileAndOr(bool a, bool b, bool c)
    {
        while (a && (b || c))
        {
            a = false;
        }
    }
*/

digraph "WhileAndOr" {
cfg0_block0 [shape=record label="{ENTRY #0}"]
cfg0_block1 [shape=record label="{BLOCK #1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: a|##########}"]
cfg0_block2 [shape=record label="{BLOCK #2|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: b|##########}"]
cfg0_block3 [shape=record label="{BLOCK #3|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: c|##########}"]
cfg0_block4 [shape=record label="{BLOCK #4|0# ExpressionStatementOperation / ExpressionStatementSyntax: a = false;|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: a = false|2# ParameterReferenceOperation / IdentifierNameSyntax: a|2# LiteralOperation / LiteralExpressionSyntax: false|##########}"]
cfg0_block5 [shape=record label="{EXIT #5}"]
cfg0_block0 -> cfg0_block1
cfg0_block4 -> cfg0_block1
cfg0_block1 -> cfg0_block2 [label="Else"]
cfg0_block2 -> cfg0_block3 [label="Else"]
cfg0_block2 -> cfg0_block4 [label="WhenTrue"]
cfg0_block3 -> cfg0_block4 [label="Else"]
cfg0_block1 -> cfg0_block5 [label="WhenFalse"]
cfg0_block3 -> cfg0_block5 [label="WhenFalse"]
}
